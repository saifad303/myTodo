{"version":3,"sources":["firebase.js","components/Form.js","components/MyList.js","components/App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Form","item","useState","title","setTitle","action","onSubmit","e","preventDefault","todoRef","database","ref","todo","complete","push","htmlFor","type","onChange","target","value","MyList","todoList","setTodoList","useEffect","on","snap","todos","val","fetchedList","id","editable","editChangeHandler","map","index","onClick","child","update","editSubmitionHandler","list","newItem","console","log","findIndex","newList","filter","splice","listEditHandler","style","marginLeft","remove","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAaEA,IAASC,cAVU,CACjBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,sDACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,8CAKMR,QAAf,ECiBaS,MA7Bf,YAAwB,EAARC,KAAS,IAAD,EACIC,mBAAS,IADb,mBACfC,EADe,KACRC,EADQ,KAcpB,OACI,8BACI,uBAAMC,OAAO,GAAGC,SAbF,SAACC,GACnBA,EAAEC,iBACF,IAAIC,EAAUlB,EAASmB,WAAWC,IAAI,QAChCC,EAAO,CACTT,QACAU,UAAU,GAEdJ,EAAQK,KAAKF,GACbR,EAAS,KAKL,UACI,qCACI,uBAAOW,QAAQ,GAAf,qBACA,uBAAOC,KAAK,OAAOC,SAAU,SAACV,GAAD,OAAOH,EAASG,EAAEW,OAAOC,QAAQA,MAAOhB,OAEzE,mCACI,wBAAQa,KAAK,SAAb,4B,QC4ELI,MAjGf,WAAmB,IAAD,EAEgBlB,mBAAS,IAFzB,mBAETmB,EAFS,KAECC,EAFD,OAGUpB,qBAHV,mBAGTC,EAHS,KAGFC,EAHE,KAKdmB,qBAAU,WACNhC,IAASmB,WAAWC,IAAI,QAAQa,GAAG,SAAS,SAACC,GAEzC,IAAIC,EAAQD,EAAKE,MACbC,EAAc,GAElB,IAAI,IAAIC,KAAMH,EACVE,EAAYd,KAAZ,yBAAkBe,GAAIA,GAAOH,EAAMG,IAAnC,IAAwCC,UAAU,KAKtDR,EAAYM,QAElB,IAGF,IAyBIG,EAAoB,SAACxB,GACrBH,EAASG,EAAEW,OAAOC,QAgBtB,OACI,gCACI,cAAC,EAAD,IACA,yCACA,uBAEIE,EAASW,KAAI,SAAC/B,EAAMgC,GAChB,OACI,8BACI,mCAEQhC,EAAK6B,SACD,gCACI,uBAAOd,KAAK,OAAOG,MAAOhB,EAAOc,SAAUc,IAC3C,wBAAQG,QAAS,SAAC3B,GAAQA,EAAEC,iBA3BzC,SAACP,GAGxBV,IAASmB,WAAWC,IAAI,QAAQwB,MAAMlC,EAAK4B,IAAIO,OAAO,CAClDvB,SAAUZ,EAAKY,SACfV,MAAOA,IAsBuEkC,CAAqBpC,IAAnE,uBAGJ,gCACI,4BAAIA,EAAKE,QACT,wBAAQ+B,QAAS,SAAC3B,GAAQA,EAAEC,iBA7D9C,SAAC8B,GAEnBlC,EAASkC,EAAKnC,OACd,IAAIoC,EAAO,2BAAQD,GAAR,IAAeR,UAAU,IAEpCU,QAAQC,IAAIF,GAEZ,IAAIN,EAAQZ,EAASqB,WAAU,SAACzC,GAC5B,OAAOA,EAAK4B,KAAOS,EAAKT,MAGxBc,EAAUtB,EAASuB,QAAO,SAAC3C,GAC3B,OAAOA,EAAK4B,KAAOS,EAAKT,MAM5Bc,EAAQE,OAAOZ,EAAO,EAAGM,GAIzBjB,EAAYqB,GAuCsEG,CAAgB7C,IAA9D,kBACA,wBAAQ8C,MAAO,CAACC,WAAY,QAASd,QAAS,SAAC3B,GAxBnE,IAACsB,EAwB0EtB,EAAEC,iBAxB5EqB,EAwB4G5B,EAAK4B,GAvBlItC,IAASmB,WAAWC,IAAI,QAAQwB,MAAMN,GAAIoB,UAuBN,0BAZVhB,UC/DnBiB,MATf,WAEE,OACE,8BACE,cAAC,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.54527424.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyDg9tTThFneJws4n8dJHJjsSkSm-HBHVRY\",\r\n    authDomain: \"crudreact-ee4a9.firebaseapp.com\",\r\n    databaseURL: \"https://crudreact-ee4a9-default-rtdb.firebaseio.com\",\r\n    projectId: \"crudreact-ee4a9\",\r\n    storageBucket: \"crudreact-ee4a9.appspot.com\",\r\n    messagingSenderId: \"258786023918\",\r\n    appId: \"1:258786023918:web:d7c575b47c1d1d394216ff\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export default firebase;","import React, { useState, createContext } from 'react'\r\nimport firebase from '../firebase'\r\n\r\nfunction Form({ item }) {\r\n    let [title, setTitle] = useState('')\r\n\r\n    let onSubmitHandler = (e) =>{\r\n        e.preventDefault();\r\n        let todoRef = firebase.database().ref('Todo')\r\n        const todo = {\r\n            title,\r\n            complete: false\r\n        }\r\n        todoRef.push(todo)\r\n        setTitle('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form action=\"\" onSubmit={onSubmitHandler}>\r\n                <fieldset>\r\n                    <label htmlFor=\"\">Title: </label>\r\n                    <input type=\"text\" onChange={(e) => setTitle(e.target.value)} value={title}/>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <button type='submit'>Submit</button>\r\n                </fieldset>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import React, {useEffect, useState} from 'react'\r\nimport firebase from 'firebase'\r\nimport Form from './Form'\r\n\r\nfunction MyList() {\r\n\r\n    let [todoList, setTodoList] = useState([])\r\n    let [title, setTitle] = useState();\r\n\r\n    useEffect(() =>{\r\n        firebase.database().ref('Todo').on('value', (snap) =>{\r\n            // console.log(snap.val());\r\n            let todos = snap.val()\r\n            let fetchedList = []\r\n\r\n            for(let id in todos){\r\n                fetchedList.push({id: id, ...todos[id], editable: false})\r\n            }\r\n\r\n            // console.log(fetchedList);\r\n\r\n            setTodoList(fetchedList)\r\n        })\r\n    },[])\r\n\r\n\r\n    let listEditHandler = (list) => {\r\n        // console.log(list);\r\n        setTitle(list.title)\r\n        let newItem = { ...list,  editable: true}\r\n\r\n        console.log(newItem);\r\n\r\n        let index = todoList.findIndex((item) =>{\r\n            return item.id === list.id\r\n        })\r\n\r\n        let newList = todoList.filter((item) =>{\r\n            return item.id !== list.id\r\n        })\r\n\r\n        // console.log(newList);\r\n        // console.log('id = ', index);\r\n\r\n        newList.splice(index, 0, newItem)\r\n\r\n        // console.log(newList);\r\n\r\n        setTodoList(newList)\r\n    }\r\n\r\n    let editChangeHandler = (e) =>{\r\n        setTitle(e.target.value)\r\n    }\r\n\r\n    let editSubmitionHandler = (item) =>{\r\n        // console.log(item);\r\n\r\n        firebase.database().ref('Todo').child(item.id).update({\r\n            complete: item.complete,\r\n            title: title\r\n        })\r\n    }\r\n\r\n    let deleteHandler = (id) =>{\r\n        firebase.database().ref('Todo').child(id).remove();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form/>\r\n            <h1>My List</h1>\r\n            <hr/>\r\n            {\r\n                todoList.map((item, index) => {\r\n                    return (\r\n                        <div key={index}>\r\n                            <fieldset>\r\n                                {\r\n                                    item.editable ? (\r\n                                        <div>\r\n                                            <input type=\"text\" value={title} onChange={editChangeHandler}/>\r\n                                            <button onClick={(e) => { e.preventDefault(); editSubmitionHandler(item) }}>submit</button>\r\n                                        </div>\r\n                                    ) : (\r\n                                        <div>\r\n                                            <p>{item.title}</p>\r\n                                            <button onClick={(e) => { e.preventDefault(); listEditHandler(item); }}>Edit</button>\r\n                                            <button style={{marginLeft: '10px'}} onClick={(e) => { e.preventDefault(); deleteHandler(item.id); }}>Delete</button>\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            </fieldset>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyList\r\n","import React from 'react'\nimport Form from './Form'\nimport MyList from './MyList'\n\nfunction App() {\n\n  return (\n    <div>\n      <MyList />\n    </div>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}